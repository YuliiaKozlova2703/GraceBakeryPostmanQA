{
	"info": {
		"_postman_id": "8f3c1df1-7d57-47a1-9646-e5215bb9288c",
		"name": "Bakery",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37909610",
		"_collection_link": "https://cohort46.postman.co/workspace/Cohort46~ad5f00e0-3bd5-4d66-857c-0eee1961308f/collection/37909610-8f3c1df1-7d57-47a1-9646-e5215bb9288c?action=share&source=collection_link&creator=37909610"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201); // Стандартный код для успешного создания ресурса",
									"});",
									"pm.test(\"Response fields have correct types\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.login).to.be.a(\"string\");",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");",
									"    pm.expect(jsonData.email).to.be.a(\"string\");",
									"    pm.expect(jsonData.phone).to.be.a(\"string\");",
									"    pm.expect(jsonData.isActive).to.be.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "",
									"type": "string"
								},
								{
									"key": "username",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"TestUser\",\r\n    \"firstName\": \"Ivan\",\r\n    \"email\": \"IvanIvanich@gmail.com\",\r\n    \"password\": \"pass123\", \r\n    \"phone\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Registration",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"TestUser\",\r\n    \"firstName\": \"Ivan\",\r\n    \"email\": \"IvanIvanich@gmail.com\",\r\n    \"password\": \"pass123\", \r\n    \"phone\": \"1234567\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/api/users",
									"path": [
										"api",
										"users"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"login\": \"TestUser\",\n    \"firstName\": \"Ivan\",\n    \"email\": \"IvanIvanich@gmail.com\",\n    \"phone\": \"1234567\",\n    \"role\": \"USER\"\n}"
						}
					]
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response has the expected structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.all.keys(\"token\", \"user\");",
									"",
									"    // Проверка вложенного объекта `user`",
									"    pm.expect(jsonData.user).to.have.all.keys(\"id\", \"login\", \"firstName\", \"email\", \"phone\", \"isActive\");",
									"});",
									"pm.test(\"Response contains a valid token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\").that.is.a(\"string\").and.is.not.empty;",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{Password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{UserName}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/auth",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"auth"
							]
						}
					},
					"response": [
						{
							"name": "Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic VGVzdFVzZXI6cGFzczEyMw==",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/api/auth",
									"path": [
										"api",
										"auth"
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "1"
						}
					]
				}
			]
		},
		{
			"name": "Admin actions",
			"item": [
				{
					"name": "Section",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "AddSectionPositiveAllFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"",
													"pm.test(\"Image path should not allow random letters or numbers\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    // Проверяем, что поле image существует и является строкой",
													"    pm.expect(responseData.image).to.exist.and.to.be.a('string');",
													"    ",
													"    // Проверяем, что поле image соответствует допустимому формату пути",
													"    // Например: image.png, /images/image123.jpg, assets/photo.png",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    ",
													"    pm.expect(responseData.image).to.match(validImagePathRegex, \"Image path is invalid. It should be a proper file path with an image extension.\");",
													"});",
													"",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\"); // Check if image path is a string",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"ipath/to/image44.png\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/section",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"section"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateSectionPositiveAllFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"",
													"pm.test(\"Image path should not allow random letters or numbers\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    // Проверяем, что поле image существует и является строкой",
													"    pm.expect(responseData.image).to.exist.and.to.be.a('string');",
													"    ",
													"    // Проверяем, что поле image соответствует допустимому формату пути",
													"    // Например: image.png, /images/image123.jpg, assets/photo.png",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    ",
													"    pm.expect(responseData.image).to.match(validImagePathRegex, \"Image path is invalid. It should be a proper file path with an image extension.\");",
													"});",
													"",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\"); // Check if image path is a string",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"ipath/to/image44.png\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/section",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"section"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddSectionPositiveWithoutDescription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"",
													"pm.test(\"Image path should not allow random letters or numbers\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    // Проверяем, что поле image существует и является строкой",
													"    pm.expect(responseData.image).to.exist.and.to.be.a('string');",
													"    ",
													"    // Проверяем, что поле image соответствует допустимому формату пути",
													"    // Например: image.png, /images/image123.jpg, assets/photo.png",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    ",
													"    pm.expect(responseData.image).to.match(validImagePathRegex, \"Image path is invalid. It should be a proper file path with an image extension.\");",
													"});",
													"",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"image\": \"ipath/to/image44.png\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/section",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"section"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateSectionPositiveWithoutDescription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.expect(pm.response.code).to.equal(201);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"",
													"pm.test(\"Image path should not allow random letters or numbers\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    // Проверяем, что поле image существует и является строкой",
													"    pm.expect(responseData.image).to.exist.and.to.be.a('string');",
													"    ",
													"    // Проверяем, что поле image соответствует допустимому формату пути",
													"    // Например: image.png, /images/image123.jpg, assets/photo.png",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    ",
													"    pm.expect(responseData.image).to.match(validImagePathRegex, \"Image path is invalid. It should be a proper file path with an image extension.\");",
													"});",
													"",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"image\": \"ipath/to/image44.png\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/section",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"section"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "AddSectionNegativeImageURLWithLetters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка статус-кода",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"// Проверка времени ответа",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка корректности пути изображения",
													"pm.test(\"Image path should not allow random letters or numbers\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверка, что поле image существует",
													"    pm.expect(responseData).to.have.property(\"image\").that.is.a('string');",
													"",
													"    // Шаблон для валидного пути изображения",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"",
													"    pm.expect(responseData.image).to.match(",
													"        validImagePathRegex,",
													"        \"Image path is invalid. It must be a valid file path with an image extension (e.g., /images/image.png)\"",
													"    );",
													"});",
													"",
													"// Проверка структуры и типов ответа",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"i\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/section",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"section"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddSectionNegativeWithoutTitles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код равен 400",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 500мс",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка, что сервер возвращает сообщение об обязательных полях",
													"pm.test(\"Error message mentions missing titles\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверяем, что в сообщении содержится текст об отсутствии title_de и title_ru",
													"    pm.expect(responseData).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(responseData.message).to.include(\"title_de\");",
													"    pm.expect(responseData.message).to.include(\"title_ru\");",
													"});",
													"",
													"// Проверка структуры ответа при ошибке",
													"pm.test(\"Error response structure is correct\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"status\").that.is.a(\"number\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"ipath/to/image.png\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/section",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"section"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateSectionNegativeWithoutTitles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код равен 400",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 500мс",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка, что сервер возвращает сообщение об обязательных полях",
													"pm.test(\"Error message mentions missing titles\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверяем, что в сообщении содержится текст об отсутствии title_de и title_ru",
													"    pm.expect(responseData).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(responseData.message).to.include(\"title_de\");",
													"    pm.expect(responseData.message).to.include(\"title_ru\");",
													"});",
													"",
													"// Проверка структуры ответа при ошибке",
													"pm.test(\"Error response structure is correct\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"status\").that.is.a(\"number\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"ipath/to/image.png\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/section",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"section"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateSectionInvalidURLNumbers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка статус-кода",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"// Проверка времени ответа",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка корректности пути изображения",
													"pm.test(\"Image path should not allow random letters or numbers\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверка, что поле image существует",
													"    pm.expect(responseData).to.have.property(\"image\").that.is.a('string');",
													"",
													"    // Шаблон для валидного пути изображения",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"",
													"    pm.expect(responseData.image).to.match(",
													"        validImagePathRegex,",
													"        \"Image path is invalid. It must be a valid file path with an image extension (e.g., /images/image.png)\"",
													"    );",
													"});",
													"",
													"// Проверка структуры и типов ответа",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"77\",\n    \"isActive\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/section/{{section_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"section",
												"{{section_id}}"
											]
										},
										"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
									},
									"response": []
								},
								{
									"name": "AddSectionInvalidURLNumbers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка статус-кода",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"// Проверка времени ответа",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка корректности пути изображения",
													"pm.test(\"Image path should not allow random letters or numbers\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверка, что поле image существует",
													"    pm.expect(responseData).to.have.property(\"image\").that.is.a('string');",
													"",
													"    // Шаблон для валидного пути изображения",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"",
													"    pm.expect(responseData.image).to.match(",
													"        validImagePathRegex,",
													"        \"Image path is invalid. It must be a valid file path with an image extension (e.g., /images/image.png)\"",
													"    );",
													"});",
													"",
													"// Проверка структуры и типов ответа",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"77\",\n    \"isActive\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/section/{{section_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"section",
												"{{section_id}}"
											]
										},
										"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
									},
									"response": []
								},
								{
									"name": "UpdateSectionInvalidURLLetters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка статус-кода",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"// Проверка времени ответа",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка корректности пути изображения",
													"pm.test(\"Image path should not allow random letters or numbers\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверка, что поле image существует",
													"    pm.expect(responseData).to.have.property(\"image\").that.is.a('string');",
													"",
													"    // Шаблон для валидного пути изображения",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"",
													"    pm.expect(responseData.image).to.match(",
													"        validImagePathRegex,",
													"        \"Image path is invalid. It must be a valid file path with an image extension (e.g., /images/image.png)\"",
													"    );",
													"});",
													"",
													"// Проверка структуры и типов ответа",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"bb\",\n    \"isActive\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/section/{{section_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"section",
												"{{section_id}}"
											]
										},
										"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "GetSection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.title_de).to.exist;",
											"    pm.expect(responseData.title_ru).to.exist;",
											"    pm.expect(responseData.description_de).to.exist;",
											"    pm.expect(responseData.description_ru).to.exist;",
											"    pm.expect(responseData.image).to.exist;",
											"    pm.expect(responseData.isActive).to.exist;",
											"    pm.expect(responseData.category).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Title_de and title_ru should be non-empty strings\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.title_de).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  pm.expect(responseData.title_ru).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8100/api/section/{{section_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8100",
									"path": [
										"api",
										"section",
										"{{section_id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						}
					]
				},
				{
					"name": "Size",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "AddSizePositiveAllFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"// Test for response time",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.lessThan(500);",
													"});",
													"",
													"// Test for response body properties",
													"pm.test(\"Response body has id, title_de, title_ru, mass, diameter, and persons properties\", function () {",
													"    pm.expect(pm.response.json()).to.have.all.keys('id', 'title_de', 'title_ru', 'mass', 'diameter', 'persons');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"mass\": \"1.5\",\n    \"diameter\": \"32\",\n    \"persons\": \"3\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/size",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"size"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateSizePositiveAllFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"// Test for the request method",
													"pm.test(\"Request method is PUT\", function () {",
													"    pm.expect(pm.request.method).to.equal(\"PUT\");",
													"});",
													"",
													"// Test for the request URL",
													"pm.test(\"Request URL is correct\", function () {",
													"    pm.expect(pm.request.url.toString()).to.equal(\"{{baseURL}}/api/size\");",
													"});",
													"",
													"// Test for the response body",
													"pm.test(\"Response body reflects the submitted JSON data\", function () {",
													"    // Add your specific test for the response body here",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/size",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"size"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddSizePositiveMinFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"// Test for response body properties",
													"pm.test(\"Response body should contain expected properties\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('id');",
													"    pm.expect(pm.response.json()).to.have.property('title_de');",
													"    pm.expect(pm.response.json()).to.have.property('title_ru');",
													"    pm.expect(pm.response.json()).to.have.property('persons');",
													"});",
													"",
													"// Test for response body data",
													"pm.test(\"Response should contain the submitted data\", function () {",
													"    pm.expect(pm.response.json().id).to.eql(11);",
													"    pm.expect(pm.response.json().title_de).to.eql(\"title_de\");",
													"    pm.expect(pm.response.json().title_ru).to.eql(\"title_ru\");",
													"    pm.expect(pm.response.json().persons).to.eql(\"3\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"persons\": \"3\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/size",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"size"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateSizePositiveMinFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"// Test for response body properties",
													"pm.test(\"Response body should have an 'id' property\", function () {",
													"    pm.response.to.have.jsonBody('id');",
													"});",
													"",
													"pm.test(\"Response body should have 'title_de' property\", function () {",
													"    pm.response.to.have.jsonBody('title_de');",
													"});",
													"",
													"pm.test(\"Response body should have 'title_ru' property\", function () {",
													"    pm.response.to.have.jsonBody('title_ru');",
													"});",
													"",
													"pm.test(\"Response body should have 'persons' property\", function () {",
													"    pm.response.to.have.jsonBody('persons');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"persons\": \"4\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/size",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"size"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "AddSizeNegativeWithoutPersonsField",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Error message indicates missing 'persons' field\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.have.property(\"error\");",
													"    pm.expect(responseData.error).to.include(\"'persons' field is required\");",
													"});",
													"pm.test(\"'persons' field is missing in response body\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.not.have.property('persons');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"mass\": \"1.5\",\n    \"diameter\": \"32\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/size",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"size"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateSizeNegativeWithoutPersonsField",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Error message indicates missing 'persons' field\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.have.property(\"error\");",
													"    pm.expect(responseData.error).to.include(\"'persons' field is required\");",
													"});",
													"pm.test(\"'persons' field is missing in response body\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.not.have.property('persons');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/size",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"size"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddSizeNegativeInvalidPersonsFormat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response fails when 'persons' has invalid format\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверяем, что статус-код 400 (Bad Request) или любой другой ожидаемый",
													"    pm.expect(pm.response.code).to.eql(400, \"Expected status code 400 for invalid 'persons' field\");",
													"",
													"    // Проверяем, что в теле ответа есть сообщение об ошибке",
													"    pm.expect(responseData).to.have.property(\"error\", \"Invalid format for 'persons'\");",
													"    ",
													"    // Дополнительно проверяем наличие поля 'persons' и его значение в запросе",
													"    pm.expect(responseData).to.have.property(\"persons\");",
													"    pm.expect(responseData.persons).to.eql(\"ddttg\", \"'persons' value in response should match the invalid input\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"mass\": \"1.5\",\n    \"diameter\": \"32\",\n    \"persons\": \"ddttg\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/size",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"size"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "GetSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/size/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"size",
										"{{id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GetSizes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/sizes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"sizes"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "AddCategoryPositiveAllFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"pm.test(\"Response body is not empty\", function () {",
													"    pm.expect(pm.response.text()).not.eql('');",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('id');",
													"    pm.expect(responseData).to.have.property('title_de');",
													"    pm.expect(responseData).to.have.property('title_ru');",
													"    pm.expect(responseData).to.have.property('description_de');",
													"    pm.expect(responseData).to.have.property('description_ru');",
													"    pm.expect(responseData).to.have.property('image');",
													"    pm.expect(responseData).to.have.property('isActive');",
													"    pm.expect(responseData).to.have.property('sectionid');",
													"    pm.expect(responseData).to.have.property('product');",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/category",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddCategoryPositiveWithoutDescription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"pm.test(\"Response body is not empty\", function () {",
													"    pm.expect(pm.response.text()).not.eql('');",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('id');",
													"    pm.expect(responseData).to.have.property('title_de');",
													"    pm.expect(responseData).to.have.property('title_ru');",
													"    pm.expect(responseData).to.have.property('image');",
													"    pm.expect(responseData).to.have.property('isActive');",
													"    pm.expect(responseData).to.have.property('sectionid');",
													"    pm.expect(responseData).to.have.property('product');",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 8,\n    \"sectionid\": 2,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/category",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateCategoryPositiveWithoutDescription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"pm.test(\"Response body is not empty\", function () {",
													"    pm.expect(pm.response.text()).not.eql('');",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('id');",
													"    pm.expect(responseData).to.have.property('title_de');",
													"    pm.expect(responseData).to.have.property('title_ru');",
													"    pm.expect(responseData).to.have.property('image');",
													"    pm.expect(responseData).to.have.property('isActive');",
													"    pm.expect(responseData).to.have.property('sectionid');",
													"    pm.expect(responseData).to.have.property('product');",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/category",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateCategoryPositive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Verify status code 200 for successful update",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Response contains updated category data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"translations\");",
													"    pm.expect(jsonData.translations).to.have.all.keys(\"ru\", \"de\");",
													"    pm.expect(jsonData).to.have.property(\"imageUrl\");",
													"    pm.expect(jsonData).to.have.property(\"is_active\", true); // Проверка, что категория активна",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"pm.test(\"Request and response match for Edit Category\", function () {",
													"    var requestBody = pm.request.body.raw;",
													"    var parsedRequestBody = JSON.parse(requestBody);",
													"    ",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData.sectionID).to.eql(parsedRequestBody.sectionID);",
													"    pm.expect(jsonData.translations.ru.title).to.eql(parsedRequestBody.translations.ru.title);",
													"    pm.expect(jsonData.translations.ru.description).to.eql(parsedRequestBody.translations.ru.description);",
													"    pm.expect(jsonData.translations.de.title).to.eql(parsedRequestBody.translations.de.title);",
													"    pm.expect(jsonData.translations.de.description).to.eql(parsedRequestBody.translations.de.description);",
													"    pm.expect(jsonData.imageUrl).to.eql(parsedRequestBody.imageUrl);",
													"    pm.expect(jsonData.is_active).to.eql(parsedRequestBody.is_active);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 17,\n    \"sectionid\": 6,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section117.png\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/category/{{category_id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category",
												"{{category_id}}"
											]
										},
										"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "AddCategoryNegativeIsActivJson",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код ответа равен 400 (ошибка клиента)",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Response body is not empty\", function () {",
													"    pm.expect(pm.response.text()).not.eql('');",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('id');",
													"    pm.expect(responseData).to.have.property('title_de');",
													"    pm.expect(responseData).to.have.property('title_ru');",
													"    pm.expect(responseData).to.have.property('description_de');",
													"    pm.expect(responseData).to.have.property('description_ru');",
													"    pm.expect(responseData).to.have.property('image');",
													"    pm.expect(responseData).to.have.property('isActive');",
													"    pm.expect(responseData).to.have.property('sectionid');",
													"    pm.expect(responseData).to.have.property('product');",
													"    pm.expect(responseData.isActive).to.be.a('boolean');",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 8,\n    \"sectionid\": 2,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"isActive\": \"jujijj\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/category?isActive=\"jujijj\"",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											],
											"query": [
												{
													"key": "isActive",
													"value": "\"jujijj\""
												}
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddCategoryNegativeIsActivNumbers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код ответа равен 400 (ошибка клиента)",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"Check if isActive is a boolean and does not contain numbers or strings\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.isActive).to.be.a('boolean');",
													"    pm.expect(responseData.isActive).to.be.oneOf([true, false]);",
													"});",
													"",
													"pm.test(\"Response body is not empty\", function () {",
													"    pm.expect(pm.response.text()).not.eql('');",
													"});",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('id');",
													"    pm.expect(responseData).to.have.property('title_de');",
													"    pm.expect(responseData).to.have.property('title_ru');",
													"    pm.expect(responseData).to.have.property('description_de');",
													"    pm.expect(responseData).to.have.property('description_ru');",
													"    pm.expect(responseData).to.have.property('image');",
													"    pm.expect(responseData).to.have.property('isActive');",
													"    pm.expect(responseData).to.have.property('sectionid');",
													"    pm.expect(responseData).to.have.property('product');",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 8,\n    \"sectionid\": 2,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"isActive\": 333\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/category",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddCategoryNegativeEmptyTitles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код ответа равен 400 (ошибка клиента)",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"// Проверка, что время ответа меньше 700 мс",
													"pm.test(\"Response time is less than 700ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"",
													"// Проверка, что поле title_de и title_ru не пустые",
													"pm.test(\"Title fields should not be empty\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title_de).to.not.be.empty;",
													"    pm.expect(responseData.title_ru).to.not.be.empty;",
													"});",
													"",
													"// Проверка, что тело ответа содержит все необходимые поля",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"sectionid\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 8,\n    \"sectionid\": 2,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/category",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddCategoryNegativeImageURLWithNumbers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код ответа равен 400 (ошибка клиента)",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"// Проверка, что время ответа меньше 700 мс",
													"pm.test(\"Response time is less than 700ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"",
													"// Проверка пути к изображению: должно быть строкой и соответствовать формату пути",
													"pm.test(\"Image path should be a valid string representing a file path\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    // Проверяем, что поле image существует и является строкой",
													"    pm.expect(responseData.image).to.exist.and.to.be.a('string');",
													"    ",
													"    // Проверяем, что путь к изображению соответствует допустимому формату",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    pm.expect(responseData.image).to.match(validImagePathRegex, \"Image path is invalid. It should be a proper file path with an image extension.\");",
													"});",
													"",
													"// Проверка, что тело ответа содержит все необходимые поля",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\"); // Проверка, что поле image — строка",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 8,\n    \"sectionid\": 2,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": 88,\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/category",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddCategoryNegativeImageURLWithLetters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код ответа равен 400 (ошибка клиента)",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"// Проверка, что время ответа меньше 700 мс",
													"pm.test(\"Response time is less than 700ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"",
													"// Проверка пути к изображению: должно быть строкой и соответствовать формату пути",
													"pm.test(\"Image path should be a valid string representing a file path\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    // Проверяем, что поле image существует и является строкой",
													"    pm.expect(responseData.image).to.exist.and.to.be.a('string');",
													"    ",
													"    // Проверяем, что путь к изображению соответствует допустимому формату",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    pm.expect(responseData.image).to.match(validImagePathRegex, \"Image path is invalid. It should be a proper file path with an image extension.\");",
													"});",
													"",
													"// Проверка, что тело ответа содержит все необходимые поля",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\"); // Проверка, что поле image — строка",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 8,\n    \"sectionid\": 2,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"jkfo\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/category",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateCategoryNegativeImageURLWithLetters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код ответа равен 400 (ошибка клиента)",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 700 мс",
													"pm.test(\"Response time is less than 700ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"",
													"// Проверка пути к изображению: должно быть строкой и соответствовать формату пути",
													"pm.test(\"Image path should be a valid string representing a file path\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    // Проверяем, что поле image существует и является строкой",
													"    pm.expect(responseData.image).to.exist.and.to.be.a('string');",
													"    ",
													"    // Проверяем, что путь к изображению соответствует допустимому формату",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    pm.expect(responseData.image).to.match(validImagePathRegex, \"Image path is invalid. It should be a proper file path with an image extension.\");",
													"});",
													"",
													"// Проверка, что тело ответа содержит все необходимые поля",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\"); // Проверка, что поле image — строка",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 8,\n    \"sectionid\": 2,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"jkfo\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/category",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateCategoryNegativeImageURLWithNumbers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код ответа равен 400 (ошибка клиента)",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"// Проверка, что время ответа меньше 700 мс",
													"pm.test(\"Response time is less than 700ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"",
													"// Проверка пути к изображению: должно быть строкой и соответствовать формату пути",
													"pm.test(\"Image path should be a valid string representing a file path\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    // Проверяем, что поле image существует и является строкой",
													"    pm.expect(responseData.image).to.exist.and.to.be.a('string');",
													"    ",
													"    // Проверяем, что путь к изображению соответствует допустимому формату",
													"    const validImagePathRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    pm.expect(responseData.image).to.match(validImagePathRegex, \"Image path is invalid. It should be a proper file path with an image extension.\");",
													"});",
													"",
													"// Проверка, что тело ответа содержит все необходимые поля",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\"); // Проверка, что поле image — строка",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 8,\n    \"sectionid\": 2,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": 88,\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/category",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateCategoryNegativeEmptyTitles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код ответа равен 400 (ошибка клиента)",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"// Проверка, что время ответа меньше 700 мс",
													"pm.test(\"Response time is less than 700ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"",
													"// Проверка, что поле title_de и title_ru не пустые",
													"pm.test(\"Title fields should not be empty\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.title_de).to.not.be.empty;",
													"    pm.expect(responseData.title_ru).to.not.be.empty;",
													"});",
													"",
													"// Проверка, что тело ответа содержит все необходимые поля",
													"pm.test(\"Response body contains all expected fields\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"sectionid\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"isActive\").that.is.a(\"boolean\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 8,\n    \"sectionid\": 2,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"isActive\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/category",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"category"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Get category by isActiv",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"",
											"    responseData.forEach(function(category) {",
											"        pm.expect(category).to.have.property('id').that.is.a('number');",
											"        pm.expect(category).to.have.property('title_de').that.is.a('string');",
											"        pm.expect(category).to.have.property('title_ru').that.is.a('string');",
											"        pm.expect(category).to.have.property('description_de').that.is.a('string');",
											"        pm.expect(category).to.have.property('description_ru').that.is.a('string');",
											"        pm.expect(category).to.have.property('image').that.is.a('string');",
											"        pm.expect(category).to.have.property('isActive').that.is.a('boolean');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/categories/isactive/{{isActive}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"categories",
										"isactive",
										"{{isActive}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GetCategoryByID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object').that.is.not.empty; // Fixed array to object",
											"",
											"    pm.expect(responseData).to.have.property('id').that.is.a('number');",
											"    pm.expect(responseData).to.have.property('title_de').that.is.a('string');",
											"    pm.expect(responseData).to.have.property('title_ru').that.is.a('string');",
											"    pm.expect(responseData).to.have.property('description_de').that.is.a('string');",
											"    pm.expect(responseData).to.have.property('description_ru').that.is.a('string');",
											"    pm.expect(responseData).to.have.property('image').that.is.a('string');",
											"    pm.expect(responseData).to.have.property('isActive').that.is.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Product array is present and contains expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.product).to.exist.and.to.be.an('array');",
											"    pm.expect(responseData.product.length).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/category/{{category_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"category",
										"{{category_id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GetCategoryBySectionID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/categories/section/{{section_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"categories",
										"section",
										"{{section_id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						}
					]
				},
				{
					"name": "Option",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "AddOptionPositive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 700ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"",
													"pm.test(\"Response body contains valid data\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\").and.to.equal(\"title_de\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\").and.to.equal(\"title_ru\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\").and.to.equal(\"description_de\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\").and.to.equal(\"description_ru\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\").and.to.equal(\"imageholder.com/section17.png\");",
													"    pm.expect(response.sizeprices).to.be.an(\"array\").that.has.lengthOf(3);",
													"    response.sizeprices.forEach(function (sizeprice) {",
													"        pm.expect(sizeprice).to.have.property(\"price\").that.is.a(\"number\");",
													"        pm.expect(sizeprice).to.have.property(\"sizeid\").that.is.a(\"number\");",
													"    });",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"sizeprices\" :\n    [\n        {\n            \"price\": 1.2,\n            \"sizeid\": 1\n        },\n        {\n            \"price\": 2.2,\n            \"sizeid\": 2\n        },\n        {\n            \"price\": 3.2,\n            \"sizeid\": 4\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/option",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"option"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "AddOptionPositiveNegativeWithoutTitles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_de is required\");",
													"});",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_ru is required\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"sizeprices\" :\n    [\n        {\n            \"price\": 1.2,\n            \"sizeid\": 1\n        },\n        {\n            \"price\": 2.2,\n            \"sizeid\": 2\n        },\n        {\n            \"price\": 3.2,\n            \"sizeid\": 4\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/option",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"option"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddOptionPositiveNegativeInvalidPriceFormat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for invalid price format\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"Invalid price format\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_de is required\");",
													"});",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_ru is required\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"sizeprices\" :\n    [\n        {\n            \"price\": \"j\",\n            \"sizeid\": 1\n        },\n        {\n            \"price\": \"l\",\n            \"sizeid\": 2\n        },\n        {\n            \"price\": \"s\",\n            \"sizeid\": 4\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/option",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"option"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateOptionPositiveNegativeInvalidPriceFormat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for invalid price format\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"Invalid price format\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_de is required\");",
													"});",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_ru is required\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/option",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"option"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateOptionPositiveNegativeWithoutTitles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_de is required\");",
													"});",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_ru is required\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"sizeprices\" :\n    [\n        {\n            \"price\": 1.2,\n            \"sizeid\": 1\n        },\n        {\n            \"price\": 2.2,\n            \"sizeid\": 2\n        },\n        {\n            \"price\": 3.2,\n            \"sizeid\": 4\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/option",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"option"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "AddOptionPositiveNegativeWithoutPrice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for missing price\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"price is required\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_de is required\");",
													"});",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_ru is required\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"sizeprices\" :\n    [\n        {\n            \"sizeid\": 1\n        },\n        {\n            \"sizeid\": 2\n        },\n        {\n            \"sizeid\": 4\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/option",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"option"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateOptionPositiveNegativeWithoutPrice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for missing price\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"price is required\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_de is required\");",
													"});",
													"pm.test(\"Error message is returned\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_ru is required\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\",\n    \"sizeprices\" :\n    [\n        {\n            \"sizeid\": 1\n        },\n        {\n            \"sizeid\": 2\n        },\n        {\n            \"sizeid\": 4\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/option",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"option"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "GetOption",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"pm.test(\"Response body is not empty\", function () {",
											"    pm.expect(pm.response.text()).not.equal(\"\");",
											"});",
											"",
											"pm.test(\"Response body should be in JSON format\", function () {",
											"    pm.response.to.have.header('Content-Type', 'application/json');",
											"});",
											"",
											"",
											"pm.test(\"Response body should have valid option_id\", function () {",
											"    pm.expect(pm.response.json().id).to.be.a('number');",
											"    pm.expect(pm.response.json().id).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/option/{{option_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"option",
										"{{option_id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GetOptionAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// Test for response body type",
											"pm.test(\"Response body should be in JSON format\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
											"});",
											"",
											"// Test for specific query parameter in the response",
											"pm.test(\"Response should contain data for specified ID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(1);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Test for specific properties in the response body",
											"pm.test(\"Response body should contain specific properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('description');",
											"});",
											"// Test for checking if the response body is not empty",
											"pm.test(\"Response body should not be empty\", function () {",
											"    pm.response.to.not.be.oneOf([null, \"\"]);",
											"});",
											"",
											"// Test for checking if the response body contains an array of options",
											"pm.test(\"Response body should contain an array of options\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.options).to.be.an('array');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/options",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"options"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get bakeryoptionals by product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/options/product/{{option_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"options",
										"product",
										"{{option_id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						}
					]
				},
				{
					"name": "Ingredient",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "AddIngredientPositiveAllFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image_de\": \"imageholder.com/section17.png\",\n    \"image_ru\": \"imageholder.com/section18.png\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/ingredient",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"ingredient"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateIngredientPositiveAllFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
													"});",
													"// Test for response body properties after successful PUT request",
													"pm.test(\"Verify response body properties after successful PUT request\", function () {",
													"    pm.response.to.have.jsonBody(\"id\");",
													"    pm.response.to.have.jsonBody(\"title_de\");",
													"    pm.response.to.have.jsonBody(\"title_ru\");",
													"    pm.response.to.have.jsonBody(\"description_de\");",
													"    pm.response.to.have.jsonBody(\"description_ru\");",
													"    pm.response.to.have.jsonBody(\"image_de\");",
													"    pm.response.to.have.jsonBody(\"image_ru\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":16,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image_de\": \"imageholder.com/section17.png\",\n    \"image_ru\": \"imageholder.com/section18.png\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/ingredient/{{id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"ingredient",
												"{{id}}"
											]
										},
										"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "AddIngredientNegativeWithoutImageURL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код равен 400",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 500 мс",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка, что сообщение об ошибке содержит информацию о недостающем поле image",
													"pm.test(\"Error message mentions missing 'image' field\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(responseData.message).to.include(\"image\");",
													"});",
													"",
													"// Проверка структуры ответа при ошибке",
													"pm.test(\"Error response has correct structure\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"status\").that.is.a(\"number\");",
													"});",
													"",
													"// Проверка, что title_de и title_ru присутствуют и не равны null",
													"pm.test(\"Response body has not-null properties for title_de and title_ru\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"title_de\").that.is.a(\"string\").and.to.not.be.null;",
													"    pm.expect(responseData).to.have.property(\"title_ru\").that.is.a(\"string\").and.to.not.be.null;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/ingredient",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"ingredient"
											]
										}
									},
									"response": []
								},
								{
									"name": "AddIngredientNegativeImageURLWithLetters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код равен 400",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 500 мс",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка, что сообщение об ошибке указывает на некорректный формат image_de и image_ru",
													"pm.test(\"Error message mentions invalid format for 'image_de' and 'image_ru'\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(responseData.message).to.include(\"image_de\");",
													"    pm.expect(responseData.message).to.include(\"image_ru\");",
													"    pm.expect(responseData.message).to.include(\"invalid format\");",
													"});",
													"",
													"// Проверка структуры ответа при ошибке",
													"pm.test(\"Error response has correct structure\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"status\").that.is.a(\"number\");",
													"});",
													"",
													"// Проверка, что поля image_de и image_ru не соответствуют валидному пути изображения",
													"pm.test(\"Image paths 'image_de' and 'image_ru' are invalid\", function () {",
													"    const invalidImageRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверяем, что значения image_de и image_ru некорректны",
													"    pm.expect(responseData.image_de).to.not.match(invalidImageRegex, \"image_de should not match valid image path format\");",
													"    pm.expect(responseData.image_ru).to.not.match(invalidImageRegex, \"image_ru should not match valid image path format\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":16,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image_de\": \"i\",\n    \"image_ru\": \"i\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/ingredient",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"ingredient"
											]
										}
									},
									"response": []
								},
								{
									"name": "AddIngredientNegativeImageURLWithNumbers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код равен 400",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 500 мс",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка, что сообщение об ошибке указывает на некорректный формат image_de и image_ru",
													"pm.test(\"Error message mentions invalid format for 'image_de' and 'image_ru'\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(responseData.message).to.include(\"image_de\");",
													"    pm.expect(responseData.message).to.include(\"image_ru\");",
													"    pm.expect(responseData.message).to.include(\"invalid format\");",
													"});",
													"",
													"// Проверка структуры ответа при ошибке",
													"pm.test(\"Error response has correct structure\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"status\").that.is.a(\"number\");",
													"});",
													"",
													"// Проверка, что поля image_de и image_ru не соответствуют валидному пути изображения",
													"pm.test(\"Image paths 'image_de' and 'image_ru' are invalid\", function () {",
													"    const invalidImageRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверяем, что значения image_de и image_ru некорректны",
													"    pm.expect(responseData.image_de).to.not.match(invalidImageRegex, \"image_de should not match valid image path format\");",
													"    pm.expect(responseData.image_ru).to.not.match(invalidImageRegex, \"image_ru should not match valid image path format\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":16,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image_de\": 88,\n    \"image_ru\": 88\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/ingredient",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"ingredient"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateIngredientNegativeImageURLWithNumbers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код равен 400",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 500 мс",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка, что сообщение об ошибке указывает на некорректный формат image_de и image_ru",
													"pm.test(\"Error message mentions invalid format for 'image_de' and 'image_ru'\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(responseData.message).to.include(\"image_de\");",
													"    pm.expect(responseData.message).to.include(\"image_ru\");",
													"    pm.expect(responseData.message).to.include(\"invalid format\");",
													"});",
													"",
													"// Проверка структуры ответа при ошибке",
													"pm.test(\"Error response has correct structure\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"status\").that.is.a(\"number\");",
													"});",
													"",
													"// Проверка, что поля image_de и image_ru не соответствуют валидному пути изображения",
													"pm.test(\"Image paths 'image_de' and 'image_ru' are invalid\", function () {",
													"    const invalidImageRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверяем, что значения image_de и image_ru некорректны",
													"    pm.expect(responseData.image_de).to.not.match(invalidImageRegex, \"image_de should not match valid image path format\");",
													"    pm.expect(responseData.image_ru).to.not.match(invalidImageRegex, \"image_ru should not match valid image path format\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":16,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image_de\": 88,\n    \"image_ru\": 88\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/ingredient",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"ingredient"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateIngredientNegativeImageURLWithLetters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код равен 400",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 500 мс",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка, что сообщение об ошибке указывает на некорректный формат image_de и image_ru",
													"pm.test(\"Error message mentions invalid format for 'image_de' and 'image_ru'\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(responseData.message).to.include(\"image_de\");",
													"    pm.expect(responseData.message).to.include(\"image_ru\");",
													"    pm.expect(responseData.message).to.include(\"invalid format\");",
													"});",
													"",
													"// Проверка структуры ответа при ошибке",
													"pm.test(\"Error response has correct structure\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"status\").that.is.a(\"number\");",
													"});",
													"",
													"// Проверка, что поля image_de и image_ru не соответствуют валидному пути изображения",
													"pm.test(\"Image paths 'image_de' and 'image_ru' are invalid\", function () {",
													"    const invalidImageRegex = /^\\/?([\\w-]+\\/)*[\\w-]+\\.(jpg|jpeg|png|gif|bmp|webp)$/i;",
													"    const responseData = pm.response.json();",
													"",
													"    // Проверяем, что значения image_de и image_ru некорректны",
													"    pm.expect(responseData.image_de).to.not.match(invalidImageRegex, \"image_de should not match valid image path format\");",
													"    pm.expect(responseData.image_ru).to.not.match(invalidImageRegex, \"image_ru should not match valid image path format\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":16,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image_de\": \"i\",\n    \"image_ru\": \"i\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/ingredient",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"ingredient"
											]
										}
									},
									"response": []
								},
								{
									"name": "AddIngredientNegativeWithoutTitles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код равен 400",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 500 мс",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка, что в сообщении об ошибке указаны отсутствующие поля title_de и title_ru",
													"pm.test(\"Error message mentions missing 'title_de' and 'title_ru'\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(responseData.message).to.include(\"title_de\");",
													"    pm.expect(responseData.message).to.include(\"title_ru\");",
													"    pm.expect(responseData.message).to.include(\"required\");",
													"});",
													"",
													"// Проверка структуры ответа при ошибке",
													"pm.test(\"Error response has correct structure\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"status\").that.is.a(\"number\");",
													"});",
													"",
													"// Проверка, что поля title_de и title_ru отсутствуют в ответе",
													"pm.test(\"Response body does not contain 'title_de' or 'title_ru'\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.not.have.property(\"title_de\");",
													"    pm.expect(responseData).to.not.have.property(\"title_ru\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image_de\": \"i\",\n    \"image_ru\": \"i\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/ingredient",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"ingredient"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateIngredientNegativeWithoutImageURL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код равен 400",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 500 мс",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка, что сообщение об ошибке содержит информацию о недостающем поле image",
													"pm.test(\"Error message mentions missing 'image' field\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(responseData.message).to.include(\"image\");",
													"});",
													"",
													"// Проверка структуры ответа при ошибке",
													"pm.test(\"Error response has correct structure\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"status\").that.is.a(\"number\");",
													"});",
													"",
													"// Проверка, что title_de и title_ru присутствуют и не равны null",
													"pm.test(\"Response body has not-null properties for title_de and title_ru\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"title_de\").that.is.a(\"string\").and.to.not.be.null;",
													"    pm.expect(responseData).to.have.property(\"title_ru\").that.is.a(\"string\").and.to.not.be.null;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":16,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/ingredient/{{id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"ingredient",
												"{{id}}"
											]
										},
										"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
									},
									"response": []
								},
								{
									"name": "UpdateIngredientNegativeWithoutTitles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Проверка, что статус-код равен 400",
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Проверка, что время ответа меньше 500 мс",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"// Проверка, что в сообщении об ошибке указаны отсутствующие поля title_de и title_ru",
													"pm.test(\"Error message mentions missing 'title_de' and 'title_ru'\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(responseData.message).to.include(\"title_de\");",
													"    pm.expect(responseData.message).to.include(\"title_ru\");",
													"    pm.expect(responseData.message).to.include(\"required\");",
													"});",
													"",
													"// Проверка структуры ответа при ошибке",
													"pm.test(\"Error response has correct structure\", function () {",
													"    const response = pm.response.json();",
													"",
													"    pm.expect(response).to.have.property(\"error\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");",
													"    pm.expect(response).to.have.property(\"status\").that.is.a(\"number\");",
													"});",
													"",
													"// Проверка, что поля title_de и title_ru отсутствуют в ответе",
													"pm.test(\"Response body does not contain 'title_de' or 'title_ru'\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.not.have.property(\"title_de\");",
													"    pm.expect(responseData).to.not.have.property(\"title_ru\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":16,\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image_de\": \"imageholder.com/section17.png\",\n    \"image_ru\": \"imageholder.com/section18.png\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/ingredient/{{id}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"ingredient",
												"{{id}}"
											]
										},
										"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "GetIngredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// Test for response body properties",
											"pm.test(\"Response body has all expected properties\", function () {",
											"    pm.response.to.have.jsonBody('id');",
											"    pm.response.to.have.jsonBody('title_de');",
											"    pm.response.to.have.jsonBody('title_ru');",
											"    pm.response.to.have.jsonBody('description_de');",
											"    pm.response.to.have.jsonBody('description_ru');",
											"    pm.response.to.have.jsonBody('image_de');",
											"    pm.response.to.have.jsonBody('image_ru');",
											"    pm.response.to.have.jsonBody('productid');",
											"});",
											"",
											"// Test for response headers",
											"pm.test(\"Content-Type header is present and has the correct value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 50ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(50);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/ingredient/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"ingredient",
										"{{id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GetIngredientsByProduct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// Test for response body existence",
											"pm.test(\"Response body should exist\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/ingredients/product/{{product_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"ingredients",
										"product",
										"{{product_id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GetIngredientsAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// Test for response body being in JSON format",
											"pm.test(\"Response body is in JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// Test for response time being less than 200ms",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/ingredients",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"ingredients"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						}
					]
				},
				{
					"name": "Image",
					"item": [
						{
							"name": "Positive",
							"item": []
						},
						{
							"name": "Negative",
							"item": []
						},
						{
							"name": "Get image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/image/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"image",
										"{{id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Del image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/image/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"image",
										"{{id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Add image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\":11,\n    \"image\": \"imageholder.com/section17.png\",\n    \"productid\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/image",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"image"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Update image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\":3,\n    \"image\": \"imageholder.com/section18.png\",\n    \"productid\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/image/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"image",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "Product",
					"item": [
						{
							"name": "Positive",
							"item": []
						},
						{
							"name": "Negative",
							"item": []
						},
						{
							"name": "GetProduct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// Test for response body properties",
											"pm.test(\"Response body has the correct properties\", function () {",
											"    pm.response.to.have.jsonBody('id');",
											"    pm.response.to.have.jsonBody('title_de');",
											"    pm.response.to.have.jsonBody('title_ru');",
											"    pm.response.to.have.jsonBody('description_de');",
											"    pm.response.to.have.jsonBody('description_ru');",
											"    pm.response.to.have.jsonBody('isActive');",
											"    pm.response.to.have.jsonBody('categoryid');",
											"    pm.response.to.have.jsonBody('ingredients');",
											"    pm.response.to.have.jsonBody('bakeryoptionals');",
											"    pm.response.to.have.jsonBody('filters');",
											"    pm.response.to.have.jsonBody('image');",
											"    pm.response.to.have.jsonBody('sizeprices');",
											"});",
											"",
											"// Test for response headers",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Test for response body schema",
											"pm.test(\"Response body has the correct schema\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('id');",
											"    pm.expect(pm.response.json()).to.have.property('title_de');",
											"    pm.expect(pm.response.json()).to.have.property('title_ru');",
											"    pm.expect(pm.response.json()).to.have.property('description_de');",
											"    pm.expect(pm.response.json()).to.have.property('description_ru');",
											"    pm.expect(pm.response.json()).to.have.property('isActive');",
											"    pm.expect(pm.response.json()).to.have.property('categoryid');",
											"    pm.expect(pm.response.json()).to.have.property('ingredients');",
											"    pm.expect(pm.response.json()).to.have.property('bakeryoptionals');",
											"    pm.expect(pm.response.json()).to.have.property('filters');",
											"    pm.expect(pm.response.json()).to.have.property('image');",
											"    pm.expect(pm.response.json()).to.have.property('sizeprices');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/product/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"product",
										"{{id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GetProductsAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"    pm.expect(pm.response.json()).to.not.be.empty;",
											"});",
											"// Test for response body properties",
											"pm.test(\"Response body has 'products' property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('products');",
											"});",
											"",
											"// Test for response headers",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get products by category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/products/category/{{category_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"products",
										"category",
										"{{category_id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Add product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 2,\n    \"title_de\": \"title_de2\",\n    \"title_ru\": \"title_ru2\",\n    \"description_de\": \"description_de2\",\n    \"description_ru\": \"description_ru2\",\n    \"isActive\": 1,\n    \"categoryid\": 1, \n    \"sizeprices\": [\n        {\n            \"sizeid\": 2,\n            \"price\": 2.2\n        },\n        {\n            \"sizeid\": 4,\n            \"price\": 3.2\n        },\n        {\n            \"sizeid\": 1,\n            \"price\": 1.2\n        }\n    ],\n    \"ingredients\": [\n        {\n            \"id\": 1,\n            \"title_de\": \"title_dei1\",\n            \"title_ru\": \"title_rui1\",\n            \"description_de\": \"description_dei1\",\n            \"description_ru\": \"description_rui1\",\n            \"image_de\": \"imageholder.com/section17.png\",\n            \"image_ru\": \"imageholder.com/section18.png\"\n        },\n        {\n            \"id\": 2,\n            \"title_de\": \"title_de\",\n            \"title_ru\": \"title_ru\",\n            \"description_de\": \"description_de\",\n            \"description_ru\": \"description_ru\",\n            \"image_de\": \"imageholder.com/section17.png\",\n            \"image_ru\": \"imageholder.com/section18.png\"\n        }\n    ],\n    \"filters\": [\n        {\n        \"id\": 2,\n        \"title_de\": \"title_de\",\n        \"title_ru\": \"title_ru\",\n        \"description_de\": \"description_de\",\n        \"description_ru\": \"description_ru\",\n        \"image\": \"imageholder.com/section17.png\"\n        },\n        {\n            \"id\": 3,\n            \"title_de\": \"title_de\",\n            \"title_ru\": \"title_ru\",\n            \"description_de\": \"description_de\",\n            \"description_ru\": \"description_ru\",\n            \"image\": \"imageholder.com/section17.png\"\n        }\n    ],\n\n    \"bakeryoptionals\": [\n        {\n            \"id\": 1,\n            \"title_de\": \"title_de\",\n            \"title_ru\": \"title_ru\",\n            \"description_de\": \"description_de\",\n            \"description_ru\": \"description_ru\",\n            \"image\": \"imageholder.com/section18.png\",\n            \"sizeprices\": [\n                {\n                    \"sizeid\": 4,\n                    \"price\": 3.2\n                },\n                {\n                    \"sizeid\": 1,\n                    \"price\": 1.2\n                },\n                {\n                    \"sizeid\": 2,\n                    \"price\": 2.2\n                }\n            ]\n        },\n        {\n            \"id\": 2,\n            \"title_de\": \"title_de\",\n            \"title_ru\": \"title_ru\",\n            \"description_de\": \"description_de\",\n            \"description_ru\": \"description_ru\",\n            \"image\": \"imageholder.com/section17.png\",\n            \"sizeprices\": [\n                {\n                    \"sizeid\": 2,\n                    \"price\": 2.2\n                },\n                {\n                    \"sizeid\": 1,\n                    \"price\": 1.2\n                },\n                {\n                    \"sizeid\": 4,\n                    \"price\": 3.2\n                }\n            ]\n        }\n    ]\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8100/api/product",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8100",
									"path": [
										"api",
										"product"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Update product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"isActive\": true,\n    \"categoryid\": 1,\n    \"ingredients\": [\n        {\n            \"id\": 2\n        },\n        {\n            \"id\": 1\n        },        \n        {\n            \"id\": 3\n        }\n    ],\n    \"bakeryoptionals\": [\n        {\n            \"id\": 1\n        },\n        {\n            \"id\": 2\n        }\n    ],\n    \"filters\": [\n        {\n            \"id\": 3\n        },\n        {\n            \"id\": 2\n        }\n    ],\n    \"image\": [],\n    \"sizeprices\": [\n        {\n            \"sizeid\": 1,\n            \"price\": 2.2\n        },\n        {\n            \"sizeid\": 4,\n            \"price\": 3.2\n        },\n        {\n            \"sizeid\": 2,\n            \"price\": 5.2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/api/product/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"product",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "Filter",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "AddFilterPositiveAllFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 700ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"",
													"pm.test(\"Response body contains valid data\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\").and.to.equal(\"title_de\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\").and.to.equal(\"title_ru\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\").and.to.equal(\"description_de\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\").and.to.equal(\"description_ru\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\").and.to.equal(\"imageholder.com/section17.png\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":11,\n    \"title_de\": \"title_de\",\n    \"title_ru\": \"title_ru\",\n    \"description_de\": \"description_de\",\n    \"description_ru\": \"description_ru\",\n    \"image\": \"imageholder.com/section17.png\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/api/filter",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"filter"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateFilterPositiveAllFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 700ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(700);",
													"});",
													"",
													"pm.test(\"Response body contains valid data\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
													"    pm.expect(response).to.have.property(\"title_de\").that.is.a(\"string\").and.to.equal(\"title_de\");",
													"    pm.expect(response).to.have.property(\"title_ru\").that.is.a(\"string\").and.to.equal(\"title_ru\");",
													"    pm.expect(response).to.have.property(\"description_de\").that.is.a(\"string\").and.to.equal(\"description_de\");",
													"    pm.expect(response).to.have.property(\"description_ru\").that.is.a(\"string\").and.to.equal(\"description_ru\");",
													"    pm.expect(response).to.have.property(\"image\").that.is.a(\"string\").and.to.equal(\"imageholder.com/section17.png\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/filter",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"filter"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "AddFilterNegativeWithoutTitles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for missing title_de\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_de is required\");",
													"});",
													"pm.test(\"Error message for missing title_ru\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_ru is required\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/filter",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"filter"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "UpdateFilterNegativeWithoutTitles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for missing title_de\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_de is required\");",
													"});",
													"pm.test(\"Error message for missing title_ru\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.error).to.equal(\"title_ru is required\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/api/filter",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"api",
												"filter"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "GetFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/filter/{{id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"filter",
										"{{id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GetFltersAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/filters",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"filters"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GetFiltersByProduct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/api/filters/product/{{product_id}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"api",
										"filters",
										"product",
										"{{product_id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						}
					]
				},
				{
					"name": "Optionsize",
					"item": [
						{
							"name": "Get optionsize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/optionsize/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"optionsize",
										"{{id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get optionsizesAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/optionsizes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"optionsizes"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Del optionsize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/optionsize/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"optionsize",
										"{{id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Add optionsize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\":11,\n    \"price\": 1.2,\n    \"sizeid\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/optionsize",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"optionsize"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Update optionsize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\":3,\n    \"price\": 1.2,\n    \"sizeid\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/optionsize",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"optionsize"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "Productsize",
					"item": [
						{
							"name": "Get productsize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/productsize/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"productsize",
										"{{id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get productsizeAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/productsizes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"productsizes"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Del productsize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/productsize/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"productsize",
										"{{id}}"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Add productsize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\":11,\n    \"price\": 1.2,\n    \"sizeid\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/productsize",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"productsize"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "Update productsize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\":3,\n    \"price\": 1.2,\n    \"sizeid\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/productsize/{{id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"productsize",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "UserName",
			"value": "TestUser",
			"type": "string",
			"disabled": true
		},
		{
			"key": "Password",
			"value": "pass123",
			"type": "string",
			"disabled": true
		},
		{
			"key": "user_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "product_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "section_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "category_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "address_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "orderStatus",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "order_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "size_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "date_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "filter_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "picture_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "option_id",
			"value": "1",
			"type": "default",
			"disabled": true
		},
		{
			"key": "ingredient_id",
			"value": "1",
			"type": "default",
			"disabled": true
		}
	]
}